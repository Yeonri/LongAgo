
# 파이프라인 스테이지
stages:
  - build
  - push
  - cleanup
  - deploy

# 변수
variables:

  # Docker Hub 경로
  FE_IMAGE: "ssafyb101/my-fe"
  BE_IMAGE: "ssafyb101/my-be"


#########################
# 1-1. build_FE JOB 단계 #
#########################

build_FE:
  stage: build
  image: docker:27.4.0
  variables:
    IMAGE_NAME: $FE_IMAGE
    DOCKERFILE_PATH: FE/Dockerfile
    CONTEXT: FE
    VITE_GOOGLE_CLIENT_ID: "$VITE_GOOGLE_CLIENT_ID"
    VITE_MAIN_API_SERVER_URL: "$VITE_MAIN_API_SERVER_URL"
    VITE_USERS: "$VITE_USERS"
    VITE_USERS_SIGNIN: "$VITE_USERS_SIGNIN"
  script:
    - echo "==========================="
    - echo "     FRONT-END빌드 중"
    - echo "==========================="

    - echo "VITE_GOOGLE_CLIENT_ID=$VITE_GOOGLE_CLIENT_ID" >> FE/.env
    - echo "VITE_MAIN_API_SERVER_URL=$VITE_MAIN_API_SERVER_URL" >> FE/.env
    - echo "VITE_USERS=$VITE_USERS" >> FE/.env
    - echo "VITE_USERS_SIGNIN=$VITE_USERS_SIGNIN" >> FE/.env
    - cat FE/.env

    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
    - docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:latest
  rules:
  - changes:
      - FE/**/* 
    when: always
  - when: never


#########################
# 1-2. build_BE JOB 단계 #
#########################

build_BE:
  stage: build
  image: gradle:8.12.0-jdk17-alpine
  variables:
    IMAGE_NAME: $BE_IMAGE
    DOCKERFILE_PATH: BE/Dockerfile
    CONTEXT: BE
  script:
    - echo "==========================="
    - echo "      BACK-END빌드 중"
    - echo "==========================="
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
    - docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:latest
  rules:
    - changes:
      - BE/**/* 
      when: always
    - when: never


########################
# 2-1. push_FE JOB 단계 #
########################

push_FE:
  stage: push
  variables:
    IMAGE_NAME: $FE_IMAGE
  script:
    - echo "==========================="
    - echo "  FRONT-END 이미지 푸쉬 중"
    - echo "==========================="
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
  dependencies:
    - build_FE
  rules:
    - changes:
      - FE/**/* 
      when: always
    - when: never


########################
# 2-2. push_BE JOB 단계 #
########################

push_BE:
  stage: push
  variables:
    IMAGE_NAME: $BE_IMAGE
  script:
    - echo "==========================="
    - echo "  BACK-END 이미지 푸쉬 중"
    - echo "==========================="
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
  dependencies:
    - build_BE
  rules:
    - changes:
      - BE/**/* 
      when: always
    - when: never


#######################
# 3. cleanup JOB 단계  #
#######################

cleanup:
  stage: cleanup
  image: docker:27.4.0
  script:
    - echo "============================="
    - echo "   도커 이미지 및 캐시 정리 중..."
    - echo "============================="
    
    # 불필요한 이미지 제거
    - docker image prune -f

    # 특정 이미지 태그 제거
    - docker rmi $FE_IMAGE:$CI_COMMIT_SHA || true
    - docker rmi $FE_IMAGE:latest || true
    - docker rmi $BE_IMAGE:$CI_COMMIT_SHA || true
    - docker rmi $BE_IMAGE:latest || true

  when: always


##################
# 4. deploy 단계  #
##################

deploy_main:
  stage: deploy
  script:
    - echo "===================================="
    - echo "        main-server로 배포중..."
    - echo "===================================="
    
    # SSH를 통해 main-server에서 명령어 실행
    - |
      ssh -tt -i "$MAIN_SERVER_KEY" "$MAIN_SERVER_URI" << 'EOF'
        # 이미지 pull을 위한 컨테이너 off
        docker compose down
        # 컨테이너를 만들고 있다.
        docker compose up --build -d
        # 나가기
        exit
      EOF

    - echo "===================================="
    - echo "          배포 완료!!!"
    - echo "===================================="
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always

deploy_test:
  stage: deploy
  script:
    - echo "===================================="
    - echo "        test_server로 배포중..."
    - echo "===================================="
      
      #  디렉토리 이동
    - cd /home/ubuntu/
      # 이미지 pull을 위한 컨테이너 off
    - docker compose down
      # 컨테이너를 만들고 있다.
    - docker compose up --build -d

    - echo "===================================="
    - echo "          배포 완료!!!"
    - echo "===================================="
  rules:
    - if: '$CI_COMMIT_REF_NAME != "main"'
      when: always

    



